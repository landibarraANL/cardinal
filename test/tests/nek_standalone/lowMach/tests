[Tests]
  [volume]
    type = CSVDiff
    input = nek.i
    csvdiff = nek_out.csv
    min_parallel = 2
    rel_err = 1e-5
    abs_zero = 5e-7
    requirement = "Cardinal shall be able to run the lowMach NekRS example with a thin wrapper "
                  "when using a volume mesh mirror. "
                  "We add postprocessors to let us compare min/max values printed to the screen by "
                  "NekRS. We also check postprocessor differences between equivalent operations "
                  "taken directly on the NekRS solution arrays (for instance, a NekVolumeAverage) "
                  "and directly on the extracted solution (for instance, an ElementAverageValue). We "
                  "require that all the postprocessors match between these two renderings of the "
                  "solution (on the GLL points versus on the mesh mirror). This verifies "
                  "correct extraction of the NekRS solution with the 'output' parameter feature."
    required_objects = 'NekRSProblem'
  []
  [boundary]
    type = CSVDiff
    input = nek_boundary.i
    csvdiff = nek_boundary_out.csv
    min_parallel = 2
    abs_zero = 5e-7
    requirement = "Cardinal shall be able to run the channel NekRS example with a thin wrapper "
                  "when using a boundary mesh mirror. "
                  "We add postprocessors to let us compare min/max values printed to the screen by "
                  "NekRS. We also check postprocessor differences between equivalent operations "
                  "taken directly on the NekRS solution arrays (for instance, a NekSideAverage) "
                  "and directly on the extracted solution (for instance, an ElementAverageValue). We "
                  "require that all the postprocessors match between these two renderings of the "
                  "solution (on the GLL points versus on the mesh mirror). This verifies "
                  "correct extraction of the NekRS solution with the 'output' parameter feature."
    required_objects = 'NekRSProblem'
  []
[]
