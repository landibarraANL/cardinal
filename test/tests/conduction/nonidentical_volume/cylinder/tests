[Tests]
  [cylinder_heat_source]
    type = Exodiff
    input = nek_master.i
    exodiff = 'nek_master_out_nek0.e'
    min_parallel = 8
    requirement = "A coupled MOOSE-nekRS cylinder heat conduction problem shall produce the correct "
                  "temperature distribution when a heat source is applied to the nekRS problem, "
                  "and when the meshes do not perfectly line up (i.e. the volumes are different). "
                  "A reference MOOSE standalone problem (in moose.i) solves the equation "
                  "k*nabla(T)=7*T, i.e. the 'heat source' is f(T,x,z). This surrogate problem is then "
                  "repeated with Cardinal, where nekRS solves the k*nabla(T)=q, where q is a "
                  "heat source 'computed' by MOOSE to be f(T_n,x,z), where T_n is the temperature from "
                  "nekRS. This problem does not really represent any interesting physical case, but "
                  "is solely intended to show that nekRS correctly solves the heat equation with a "
                  "heat source 'computed' by some other app. The solution matches the standalone MOOSE "
                  "case very well - postprocessors for the volume-averaged and maximum temperature match the "
                  "MOOSE standalone case to within 0.1%."
    required_objects = 'NekRSProblem'
  []
  [cylinder_exact]
    type = CSVDiff
    input = nek_master_exact.i
    csvdiff = nek_master_exact_out_nek0.csv
    min_parallel = 6
    prereq = cylinder_heat_source
    requirement = "The system shall couple NekRS to MOOSE through volumetric heating when using an "
                  "exact mesh mirror. The output file was compared against the cylinder_heat_source "
                  "test, giving very similar answers. The heat source sent into NekRS was also checked "
                  "with the usrwrk_output feature."
    required_objects = 'NekRSProblem'
  []
[]
