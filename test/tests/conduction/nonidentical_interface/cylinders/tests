[Tests]
  [cylinder_conduction]
    type = Exodiff
    input = nek_master.i
    exodiff = 'nek_master_out.e'
    min_parallel = 8
    custom_cmp = 'exodiff.cmp'
    requirement = "A coupled MOOSE-nekRS two-region cylinder heat conduction problem shall predict "
                  "the correct interface and volume temperatures that are obtained from a standalone "
                  "MOOSE heat conduction simulation in the `moose.i` file of both cylinders. "
                  "Because only a constant heat flux is passed for each element during the data transfer "
                  "from MOOSE to nekRS, we do not expect the results to match perfectly with the MOOSE "
                  "standalone case (which represents the heat flux internally as a continuous function "
                  "(as opposed to elementwise-constant). We compare extrema temperature values on the "
                  "two cylinders with the MOOSE solution, and see that (1) the overall temperature "
                  "distribution matches qualitatively, and (2) the difference between the Cardinal case "
                  "and the MOOSE standalone case decreases as the mesh is refined (i.e. as the effect of "
                  "the constant monomial surface heat flux is lowered). Even with the fairly coarse mesh "
                  "used in this test, the errors in temperature are less than 0.5%."
                  "As the BISON mesh is refined, the error continually decreases until the temperatures "
                  "are very close to those predicted by the standalone MOOSE case."
    required_objects = 'NekRSProblem'
  []
  [cylinder_conduction_subcycle]
    type = CSVDiff
    input = nek_master_subcycle.i
    csvdiff = 'nek_master_subcycle_out.csv'
    min_parallel = 8
    rel_err = 1.5e-5
    requirement = "The same solution shall be obtained as the cylinder_conduction case when nekRS is "
                  "run with a smaller time step than MOOSE with subcycling. The run will not require the "
                  "the same overall number of time steps as the cylinder_conduction test, so we just compare "
                  "some postprocessor values at the end of the simulation. These CSV results are less than "
                  "1e-3 different from those for the cylinder_conduction case, so the simulation process "
                  "is equivalent. We don't use exactly the same CSV gold file because the number of time steps "
                  "differs, and would trigger a failure."
    required_objects = 'NekRSProblem'
  []
  [cylinder_conduction_reversed]
    type = CSVDiff
    input = nek_master_reversed.i
    csvdiff = 'nek_master_reversed_out.csv'
    min_parallel = 8
    rel_err = 1e-5
    requirement = "The same solution shall be obtained when nekRS is run before MOOSE. We compare CSV results "
                  "against those for the cylinder_conduction case, which match wo within 1e-5. We don't use "
                  "exactly the same CSV gold file because the number of time steps differ, and would trigger "
                  "a failure."
    required_objects = 'NekRSProblem'
  []
  [cylinder_conduction_mini]
    type = CSVDiff
    input = nek_master_mini.i
    csvdiff = 'nek_master_subcycle_out.csv'
    min_parallel = 8
    rel_err = 1.5e-5
    max_time = 400
    requirement = "The same solution shall be obtained when nekRS is run as a sub-app with minimized transfers "
                  "for in the incoming and outgoing data transfers. We compare against the same CSV file used "
                  "for the cylinder_conduction_subcycle case because the results should be exactly the same."
    required_objects = 'NekRSProblem'
  []
  [cylinder_conduction_exact]
    type = CSVDiff
    input = nek_master_exact.i
    csvdiff = 'nek_master_exact_out.csv'
    min_parallel = 8
    requirement = "The system shall support an exact NekRS mesh mirror. The solution is compared against "
                  "the cylinder_conduction case and nearly identical solutions are obtained."
    required_objects = 'NekRSProblem'
  []
[]
