@kernel void cFillKernel(const dlong Nelements, const dlong offset, const dfloat value, @restrict dfloat * source)
{
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    for(int n=0;n<p_Np;++n;@inner(0)){
      const int id = e*p_Np + n;
      source[offset + id] = value;
    }
  }
}

void scalarDirichletConditions(bcData *bc)
{
  bc->s = bc->usrwrk[bc->idM];
}

void scalarNeumannConditions(bcData *bc)
{
  bc->flux = 0.0;
}
