[Tests]
  [inlet_t]
    type = CSVDiff
    input = nek.i
    csvdiff = inlet_T.csv
    cli_args = 'Outputs/file_base=inlet_T Problem/coupling_type="inlet" Outputs/hide="dP inlet_P outlet_P outlet_T_max outlet_T_min outlet_V_max outlet_V_min"'
    requirement = "Cardinal shall be able to transfer inlet temperature and velocity to the inlet_boundary of NekRS. "
                  "We check this by applying those boundary conditions in NekRS, and looking at postprocessors on "
                  "those boundaries to match the values we sent in."
    required_objects = 'NekRSSeparateDomainProblem'
  []
  [inlet_outlet_t]
    type = CSVDiff
    input = nek.i
    csvdiff = inlet_outlet_T.csv
    rel_err = 2e-4
    cli_args = 'Outputs/file_base=inlet_outlet_T Problem/coupling_type="inlet outlet" Outputs/hide="dP inlet_P outlet_P"'
    requirement = "Cardinal shall be able to transfer inlet temperature and velocity to the inlet_boundary of NekRS. "
                  "We check this by applying those boundary conditions in NekRS, and looking at postprocessors on "
                  "those boundaries to match the values we sent in. Cardinal shall also be able to extract outlet "
                  "temperature and velocity from outlet_boundary. We check this by fetching these values using postprocessors."
    required_objects = 'NekRSSeparateDomainProblem'
  []
  [outlet_t]
    type = CSVDiff
    input = nek.i
    csvdiff = outlet_T.csv
    cli_args = 'Outputs/file_base=outlet_T Problem/coupling_type="outlet" Transfers/active="" Outputs/hide="dP inlet_P outlet_P"'
    requirement = "Cardinal shall be able to extract outlet temperature and velocity from outlet_boundary of NekRS. "
                  "We check this by fetching those values using postprocessors."
    required_objects = 'NekRSSeparateDomainProblem'
  []
[]
